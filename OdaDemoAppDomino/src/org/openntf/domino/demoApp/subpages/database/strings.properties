## Summary
dbSummary=Database details are: {0}, {1}<br/>ApiPath is: {2}<br/>MetaReplicaId is:{3}
## CompactOption
compactIntro=The {0} admin-related enums have been added to make code more readable. The core API has {1} and {2}, where the int is a total of the integers for the selected settings, e.g. a copy style compact discarding view indices would expect 16 + 32 = 48. The new methods {3} and {4} take instead a Set of the options selected. Resulting code takes more lines, but is easier to support.
compactDefault=Whoops!! This must be a new setting. Please let us know so we can add documentation.
## DatabaseOption
optsIntro=The {0} admin-related enums have been added to make code more readable. The core API has {1} and {2}, where the int is the integer for the selected setting, e.g. looking for soft deletes is 49. The new methods {2} and {3} take an Enum for the option required. Resulting code is easier to support.
optsDefault=Whoops!! This must be a new setting. Please let us know so we can add documentation.
## FixupOption
fixupIntro=The {0} admin-related enums have been added to make code more readable. The core API has {1}, where the int is a total of the integers for the selected settings, e.g. incremental with no views would expect 4 + 64 = 68. The new method  take instead a Set of the options selected. Resulting code takes more lines, but is easier to support.
fixupDefault=Whoops!! This must be a new setting. Please let us know so we can add documentation.
## FTIndex
indexIntro=A number of enums related to Full Text Indexing have been added to OpenNTF Domino API.
indexOptIntro=Used by {0}. Normally that method takes an integer which is the total of the options desired, but this overloaded method allows developers to use an enum. Options are:<ul>
indexFreqIntro=Used by {0}. Normally that method takes an integer, but this overloaded method allows developers to use an enum. <b>NOTE:</b> There is no corresponding getter, to get the FT index frequency as an enum. Options are:<ul>
searchOptIntro=Used by {0} methods. Normally those methods takes an integer, but the overloaded methods allows developers to use an enum. Options are:<ul>
sortOptIntro=Used by {0} methods. Normally those methods takes an integer, but the overloaded methods allows developers to use an enum. Options are:<ul>
domainSearchOptsIntro=Used by {0} methods. Normally those methods takes an integer, but the overloaded methods allows developers to use an enum. There are more options available than {1}.Options are:<ul>
domainSortOptsIntro=Used by {0} methods. Normally those methods takes an integer, but the overloaded methods allows developers to use an enum. There are fewer options than {1}. Options are:<ul>
## GettingDbs
gettingDbsIntro=In the core Domino API, accessing a database is done via a variety of methods both in the Session class and the Database class: <ul><li>{0}</li><li>{1}</li><li>{2}</li><li>{3}</li><li>{4}</li><li>{5}</li><li>{6}</li><li>{7}</li><li>{8}</li><li>{9}</li><li>{10}</li><li>{11}</li><li>{12}</li><li>{13}</li><ul><br/>
gettingDbsIntro2=This means code needs to call different methods depending on whether a filepath or replica id is provided. <br/>XPages added a different format for retrieving the database, {0} but no programmatic API.<br/>There are also gotchas like {1} does not return null if the database does not exist. Instead it returns a valid {2} object and the developer needs to check {3}. Best practice then is to use {4} which will return null. object but one that is not open.<br/>Opening a user''s mail database also requires getting the {5} object from the Session and calling the {6} method.<br/>
gettingDbsIntro3=While ODA keeps the various methods, we also provide a single {0} method that can take a database path, server and database path, replica id, server and replica id or API path. If the method fails, the return object will be null, giving more standard Java coding.<br/>Methods have also been added to the {2} class to get the mail database, get databases with failover or if modified since a given date, thus allowing the {3} to be used as the single entry point for retrieving any database.
## GettingDocuments
gettingDocsIntro=Getting documents from a database via the core Domino API has required certain knowledge of the API. There have been three different methods - by Note ID, Universal ID or URL. The intuitive expectation is that if no document can be found the return value would be null. But instead, the method will throw an error. The fix DOC_UNID_NULLS, available in XPages with the KHAN xsp.property, overrides this and returns null, as in other Document getter methods. ODA also adds a number of additional methods, like making a Database act like a Map, allowing {0} to retrieve a document via UNID. There are also methods to get a document with a key, which will get a document by UNID or convert a String to a UNID (because the UNID is read-write, so you can convert any String and use it as a UNID). The list of methods available are:
gettingDocsIdMethods=getDocumentByID(int), getDocumentByID(int, boolean), getDocumentByID(String), getDocumentByID(String, boolean)
gettingDocsId=Gets a document by a String or int ID, allowing you to create the document regardless of whether it already exists. Historically, developers had to convert int IDs to String.
gettingDocsUnidMethods=getDocumentByUNID(String), getDocumentByUNID(String, boolean)
gettingDocsUnid=Allows the developer to optionally create the document with the passed UNID regardless of whether it already exists. NOTE: These methods will still throw an error trying to get the document unless Session.FIXES.DOC_UNID_NULLS is true. That switch is set automatically via KHAN mode, in OsgiWorlds, or can be set for a specific session.
gettingDocsUrlMethods=getDocumentByURL(String), getDocumentByURL(String, boolean, boolean, boolean, String, String, String, String, String, boolean)
gettingDocsUrl=These methods are unchanged from the lotus.domino versions
gettingDocsMapMethods=get(), getDocumentWithKey(Serializable), getDocumentWithKey(Serializable, boolean)
gettingDocsMap={0} calls {1} which calls {2} passing false as the second parameter. That method checks whether the first parameter is a UNID, otherwise converts it to a UNID, and tries to get the document. If the second parameter is true, it will create the document if it fails.
gettingDocsMetaversalMethods=Session.getDocumentByMetaversalID(String), Session.getDocumentByMetaversalID(String, String)
gettingDocsMetaversal=These methods allow the developer to get a document directly from the session, using the metaversal ID (replicaID + UNID or serverName + "!!" + replicaID + UNID). Using the overloaded method, the developer can specify which server to retrieve the document from.
## Listeners
listenersIntro=Database Listeners can be used to run code automatically for various events. There are currently only Events added at Database level. The Events that have hooks are:
createDoc=Triggered at the {0} of the {1} method. Source and target will both be the database - the newly-created document has no properties or items set, so there is not point passing that.
deleteDoc=Triggered at the {0} of the {1} or {2} methods. The source will be the document and the target will be the database.
replication=Triggered at the {0} of the {1} method. The source will be the database and the target will be the server the replication is to be performed with.
runAgent=Triggered at the {0} of the {1} method and its variants. The source will be the database and the target will be the agent.
updateDoc=Triggered at the {0} of the {1} method and its variants. The source will be the document and the target will be the database.
listenerDefault=Whoops!! This must be a new switch. Please let us know so we can add documentation.
listenerImplementation=A Listener must implement the {0} interface. The {1} interface has two methods:<ul><li>{2} - returns a List of {3} managed by this Listener. ({4} is the interface which {5} implements.)</li><li>{6} - runs the code, passing the current EnumEvent being processed. Use an ''if'' statement to check which event is being triggered and run the relevant code.
## Transactions
transIntro=A {0} is assigned to one or more {1} objects. Assigning multiple will allow a cross-database transaction. There are two ways to load a {2} for a {3}. <ul><li>Call {4}. This method will throw an error if a {5} is already assigned to the {6}</li><li>Call {7} which will create a new {8} if none has already been created and return the {9} assigned to the {10}</li></ul>In the finally block the developer should call {11} to clear the {12} from the Database
transProc=Create or Update processes on any document''s {0} will add that {1} to the {2}. But any Domino object can be added to a {3} by calling {4}. Documents for deletion can be added to the {5} by calling {6} The number of updates or deletes queued can be found by calling {7} or {8}. The {9} can be processed by calling {10} or aborted by calling {11}
transDemo=The following demo shows transaction processing within Domino. Changing the state will update the txProcessed field on every other contact for that state in oda_1.nsf. The first button will run the transaction and roll back. The second button will run the transaction and save.Only contacts updated will be saved. This is handled automatically by the transactional code.
