## Summary
summary=Please click on the relevant link below to see method summaries and (where appropriate) sample code as appropriate:

## DateTime
compare=Comparing DateTime objects in the core requires using {0} ({1} can exceed size limits). The Java Date class provides more intuitive options. Based upon that, the following methods have been added to the DateTime class:
compareMeths=<ul><li>{0}</li><li>{1} - compares times only</li><li>{2} - compares dates only</li><li>{3}</li><li>{4} - compares times only</li><li>{5} - compares dates only</li><li>{6} (this is not expected to be particularly useful, but is included for completeness)</li><li>{7} (this is not expected to be particularly useful, but is included for completeness)</li><li>{4}</li><ul>
partOnly=Values can be written / retrieved using the following Java classes:<ul><li>{0}</li><li>{1}</li><li>{2} - since 3.2.0, allows storing as date only</li><li>{3} - since 3.2.0, allows storing as time only</li></ul>Java 8 date formats have not yet been implemented (see below)
timezone=There is no automated timezone conversion from Java to DateTime classes. The server timezone will be used when storing Java dates. This is because Java 6 date constructs like {0} do not hold a timezone. Also the {1} property of the DateTime class is read only. So converting to a different timezone than the current server is challenging, even when possible with more modern Java 8 date classes.
