## For Session_Summary
sessionRunning=Session running as {0} on server {1}
userGroupsNames=<b>User {0} available are:</b><br/>
sessionUnique=<b>Unique reference using Session.getUnique():</b> 
sessionFixes=<b>Available fixtures:</b>
sessioEnabledFixes=<b>Currently enabled fixes:</b>
## For Session_Fixes
fixAppendItemValue=Normal use of {0} appends a <b>new item of the same name</b> with the new value.<br/>This switch changes the behaviour to work in a more intuitive manner, appending the value to the existing Item.
fixCreateDb=Extends the use of {0} to return the existing Database object for the specified path or create a new database at the specified path and return the Database object relating to that.
fixDocUnid=Normal behaviour of {0} is to throw an error if the UNID cannot be found. With this fix, that method will now just return a null object and suppress the error.
fixForceJavaDates=See <a href=\"http://dontpanic82.blogspot.co.uk/2013/09/strange-implementation-of.html\">Tommy Valand''s blog post</a>. This method ensures Java dates are always returned when interacting with Document Items or ViewEntry column values.
fixMimeBlock=Just writes a warning to the console if Items are accessed while MIME Items are still open. This fix has been downgraded from blocking to just warning against access
fixMimeConvert=This no longer seems to be in use.
fixOdaNames=Uses org.openntf.domino.impl.NameODA class whenever methods would normally use lotus.domino.Name. This class can be stored in Java obejcts and uses String manipulation to convert between formats.
fixRemoveItem=Normal behaviour is to remove the <b>first</b> Item with the specified name. This switch removes <b>all</b> Items with the specified name.
fixViewUpdate=Ensures any method accessing view entries calls {0} before doing anything.
fixViewEntryConstants=Ensures {1} and {1} include view columns whose value is a constant value rather than a field value or result of an @formula.
fixPedantic=Instructs the automatic garbage collector to maintain an internal tracker for C++ backend-object IDs and only recycle when no further references remain (causes a performance hit).<br/><b>NOTE:</b> This fix is not auto-enabled with "khan" mode in XPages
fixHex=Hex values such as replicaid, unid and noteid are forced to lower case before being returned. By default string comparisons are case-sensitive, so comparing may be problematic. This will workaround that problem.
fixMissing=Whoops!! This must be a new switch. Please let us know so we can add documentation.
## For Session_Factory
factoryHistoricalTitle=HISTORICAL XPAGES ACCESS
factoryHistorical=In previous releases there were a number of ways to access sessions:<ul><li>In XPages resolving the variables {0}</li><li>{1} and variants</li></ul>
factoryXPagesTitle=XPAGES ACCESS
factoryXPages=In XPages, resolving the {0} variables is still a valid approach.<br/>{1} will still work, but is now deprecated.Since RC3 (release candidate for M1.5) the {2} Enum has been implemented. That should be used instead.
factoryJavaTitle=NON-XPAGES ACCESS
factoryJava=CrossWorlds / OSGiWorlds / Graph REST will handle setting up Sessions and Threads.
factoryCrossWorlds=<ul><li><b>CrossWorlds</b> uses a Filter to filter all HTTP requests for any web application, see {0} bundle''s {1}. This uses configuration to set up Sessions for the current user and the application signer, see {2}. You can extend this class in your web application to change the base functionality.</li>
factoryOsgiWorlds=<li><b>OsgiWorlds</b> uses an approach specifically for Vaadin development, extending the VaadinServlet class and its {0} method, see {1}. This uses configuration to set up Sessions for the current user and the application signer, see {2}. Remember to register the servlet in the normal Vaadin way (the older method is in web.xml, the newer method is using @Annotations in the application''s main UI class.</li>
factoryGraphRest=<li><b>The graph REST API</b> uses an extension to {0}, implementing the REST service extension {1}, see {2} class. This class''s {3} method initialises the thread for ODA and creates a Session as the current user using the {4} class to retrieve the current user and current database from the Domino browser session. The {5} method terminates the thread for ODA. The same classes can be used for custom REST servlets.</li>
factoryRest=<li><b>Extending <b>{0}</b>. Here the {1} method calls {2} and {3} calls {4}. The {5} method then initialises the thread with any fixes required, and adds the sessions required to the Factory using the {6} class
factoryNewTitle=NEW APPROACH
factoryNew=The recommended approach now is to use {0}. This was added because of access from XPages, XOTS, CrossWorlds and more, to manage more session types than just CURRENT, SIGNER and NATIVE. The following Enum options are available:<br><ul>
factoryEnumCurrent=A named Session for the current user
factoryEnumCurrentFA=A named Session for the current user but with full access
factoryEnumSigner=A named Session for whichever Notes ID is defined as the current application''s signer
factoryEnumSignerFA=A named Session for whichever Notes ID is defined as the current application''s signer with full access
factoryEnumNative=A Session based on the current server''s access
factoryEnumFA=A Session equivalent to Full Access Administration setting in Domino Administrator
factoryEnumPassword=A Session based on a specific Notes Client user ID and password
factoryEnumTrusted=Returns a Trusted Session, not yet implemented
factoryEnumMissing=Whoops!! This must be a new SessionType. Please let us know so we can add documentation.
## For Thread Config
threadIntro=If you are handling thread setup yourself, you will need to enable fixes and other thread settings yourself. This is done with {0}. There are two out-of-the-box configs:
threadStrict=Strict enables all fixes, applies the AutoMime settings {0} and bubbles up all exceptions to your application. This is the configuration CrossWorlds uses.
threadPermissive=Strict enables all fixes, applies the AutoMime settings {0}, and suppresses bubbling up exceptions to your application.
threadManual=If you wish to manually configure the configurations, the {0} constructor takes three parameters:<ol><li>An array of {1}</li><li>An {2} setting using one of the {3} enum values</li><li>a boolean for whether or not to bubble exceptions</li></ol>
## For implicit variables
varSession=The current user Session object. If godmode is enabled, use {0}, otherwise use {1}
varSessionAsSigner=The current signer Session object. If godmode is enabled, use {0}, otherwise use {1}.<b>NB:</b> There can be issues if multiple signers are in use or different ClassLoaders are involved. Assuming the current server has as much access, using {2} is the recommended approach.
varSessionFullAccess=The current signer Session object with full access. If godmode is enabled, use {0}, otherwise use {1}.<b>NB:</b> There can be issues if multiple signers are in use or different ClassLoaders are involved. Assuming the current server has as much access, using {2} is the recommended approach.
varOpenLogBean=The {0} holder for SSJS errors to be logged to OpenLog. See XPages OpenLog Logger documentation on OpenNTF for more details.
varServerScope=A Map, similar to other scoped variables, for holding information at server level.
varIdentityScope=A Map, similar to other scoped variables, to hold information specific to a named user at server level.
varUserScope=A Map, similar to other scoped variables, to hold information specific to a named user at application level.