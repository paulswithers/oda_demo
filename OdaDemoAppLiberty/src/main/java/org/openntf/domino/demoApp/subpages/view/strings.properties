## getEntries
getSummary=Getting entries / documents in the core API can be convoluted, depends on out-of-date constructs, demands looping that is unconventional for Java development, has some gotchas, and requires careful use of the {0} method. The various methods in ODA are designed to alleviate these issues. {1} and {2} take an object (String, List etc) and default to exact match only (the typical requirement). Their collections are iterable, so a standard Java {3} loop can be used. As with everything else, the Cpp handles are autoamtically recycled. With the ''khan'' xsp.property or the {4} fix, updates to the view during processing are ignored. With the same xsp.property or the {5} fix, all columns in the view''s design are returned (by default columns with constant values are ignored).<br/>
getFirst=Developers used to the core API will be used to using {0} and {1}. For consistency and standardisation these methods are marked deprecate in favour of {2} and {3}. However, there is no intention to remove the traditional methods.
## Unique
getUnique=A common requirement is to validate new or modified documents, to ensure that another document does not already exist with specific key values the user has chosen. For example, when creating a Company, to ensure another Company does not exist with the same Name, or Name and Postcode. As such a common requirement {0} was added to ODA to query a View passing a key or keys and the current Document (or null). The method then looks for documents matching the key (using {1}) and ensuring there is not a <i>different</i> document with the same key or keys.
## TimeSensitive
getTime=Views can have a significant impact on performance of an application if they use time-sensitive elements (selection formulas or column formulas that use @Today, @Now, Last Accessed). This is captured if the design element has a $FormulaTV field. The index (or indices, if the view is resortable) needs to be updated very regularly. Identifying and replacing those can improve application performance.
## View Index Flags
getIndex=The lotus.domino.View class has allowed easy access to some of the contents of the $Flags Item of the design note for some time (e.g. {0}, {1}, {2} etc). However, {3} only indicates whether the View is private or shared. The $Flags Item contains additional information. ODA allows access to the IndexType. The options are:
indexShared=A basic Shared View / Folder
indexPrivate=A basic Private View / Folder
indexPrivateOnServer=A Shared View / Folder that will create Private instances for each individual, stored within the server database
indexPrivateOnDesktop=A Shared View / Folder that will create Private instances for each individual, stored within the user's desktop.ndk file
indexDeletes=A ''Trash'' View, containing soft deletions only.
indexNotFoldered=A View that contains only documents that have not been moved to a Folder<br/>
indexMissing=Whoops!! This must be a new switch. Please let us know so we can add documentation.<br/>
indexOptsHeader=$Index Item
indexOpts=ODA also extends API access to the contents of the $Index Item of the View's design note. The new methods available are:
indexDisableAutoUpdateHeaderisDisableAutoUpdate()
indexDisableAutoUpdate=Whether the View has auto-update disabled ("/L" in $Index Item). This will avoid unnecessary View indices but impact retrieval of entries.
indexHideCategoriesHeader=isHideEmptyCategories()
indexHideCategories=Whether the View is set to hide empty categories ("/C" in $Index Item). This ensures the category level is not available if the user does not have read access to any documents within the category.
indexManualAutoRefreshHeader=isManualRefresh() / isAutomaticRefresh() / isAutoRefreshAfterFirstUse()
indexManualAutoRefresh=Whether the View is set for manual refresh or automatic refresh ("/M" or "/O" in $Index Item). If neither of these index flags is set and it is not set to "Auto, at most every", the view will automatically refresh after its first use. This can impact how quickly new or modified documents are available to the view.
indexAutoAfterHeader=getAutoRefreshSeconds()
indexAutoAfter=Use this method to identify if the View is set to refresh automatically but at most every <i>x</i> seconds ("/R=" in $Index Item). If a document is created / updated less than <i>x</i> seconds after the last index, the view will not be indexed. If greater than <i>x</i>, the view will be indexed.
indexDiscardIndexHeader=isDiscardIndex()
indexDiscardIndex=Whether the View is set to discard the index after each refresh ("/T" in $Index Item).
indexDiscardHoursHeader=getDiscardHours()
indexDiscardHours=The number of hours after which the index should be discarded ("/P=" in $Index Item).