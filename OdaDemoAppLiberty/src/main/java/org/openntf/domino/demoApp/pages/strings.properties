## XOTS SOURCE
xotsRunnable=@Tasklet(session = Tasklet.Session.CLONE)<br/>public static class SessionRunnable implements AbstractXotsRunnable<String> {<br/><br/>  public SessionRunnable() {<br/><br/>  }<br/><br/>  public void run() {<br/>    try {<br/>    String name = Factory.getSession(SessionType.CURRENT). getEffectiveUserName();<br/>    return name;<br/>  } catch (Throwable t) {<br/>    t.printStackTrace();<br/>    System.out.println(t.getMessage());<br/>    }<br/>  }<br/>}<br/><br/>Xots.getService().submit(new SessionRunnable());
xotsCallable=@Tasklet(session = Tasklet.Session.CLONE)<br/>public static class SessionCallable implements AbstractXotsCallable<String> {<br/><br/>  private int threadNo;<br/>  public SessionCallable(int threadNo) {<br/>    this.threadNo = threadNo;<br/>  }<br/><br/>  public String call() {<br/>    try {<br/>    String name = Factory.getSession(SessionType.CURRENT). getEffectiveUserName();<br/>    return "Hello " + name + " from thread " + threadNo;<br/>  } catch (Throwable t) {<br/>    t.printStackTrace();<br/>    return t.getMessage();<br/>    }<br/>  }<br/>}<br/><br/>List<Future<String>> results = new ArrayList<Future<String>>();<br/>for (int i = 0; i < 10; i++) {<br/>  results.add(Xots.getService().submit(new SessionCallable(i)));<br/>}<br/>for (Future<String> f : results) {<br/>  try {<br/>    System.out.println(f.get());<br/>  } catch (InterruptedException e) {<br/>    e.printStackTrace();<br/>  } catch (ExecutionException e) {<br/>    e.printStackTrace();<br/>  }<br/></div>}

## VIEW SOURCE
entryForLoop=Session sess = Factory.getSession(SessionType.NATIVE);<br/>TreeSet<String> names = new TreeSet<String>();<br/>View states = db.getView("AllStates");<br/>ViewEntry entState = states.getAllEntries().getFirstEntry();<br/>View byState = extLib.getView("AllContactsByState");<br/>ArrayList<Object> stateVals = new ArrayList(entState.getColumnValuesEx());<br/>ViewEntryCollection ec = byState.getAllEntriesByKey(stateVals.get(0));<br/>for (ViewEntry ent : ec) {<br/>  names.add((String) ent.getColumnValues().get(8));<br/>}<br/>System.out.println(names.toString());
docForLoop=Session sess = Factory.getSession(SessionType.NATIVE);<br/>View states = db.getView("AllStates");<br/>for (Document doc : states.getAllDocuments()) {<br/>  System.out.println(doc.getUniversalID()<br/>};
viewIsUnique=View states = db.getView("allStates");<br/>String state = doc.getItemValueString("Key");<br/>if (states.checkUnique(state, doc)) {<br/>  sb.append("There are no other documents with the key " + state);<br/>} else {<br/>  sb.append("Existing document found with the key " + state);<br/>}

## DATABASE SOURCE
getDb=Session sess = Factory.getSession(SessionType.NATIVE);<br/>Database db1 = sess.getDatabase("names.nsf");<br/>Database db2 = getDatabase(sess.getServerName(), "names.nsf");<br/>Database db3 = sess.getDatabase("80257EBB00493B48");<br/>Database db4 = sess.getDatabase(sess.getServer(), "80257EBB00493B48");<br/>Database db5 = sess.getDatabase("MyServer!!80257EBB00493B48");
getDoc=Session sess = Factory.getSession(SessionType.NATIVE);<br/>Database db = sess.getDatabase("80257EBB00493B48");<br/>Document nullDoc = db.getDocumentByUNID("5C8008CD88CEDAA9717ECF2F817BB7BF");<br/>Document newDoc = db.getDocumentWithKey("CreateThisNewDoc",true);<br/>newDoc.replaceItemValue("Form","Hello");<br/>newDoc.save();<br/>Document sameDoc = sess.getDocumentByMetaversalID("80257EBB00493B485C8008CD88CEDAA9717ECF2F817BB7BF");
listener=public class DocumentListener implements IDominoListener {<br/><br/>  public DocumentListener() {<br/>    <br/>}<br/><br/>  public boolean eventHappened(IDominoEvent event) {<br/>    try {<br/>      if (event.getEvent().equals(Events.AFTER_CREATE_DOCUMENT)) {<br/>        System.out.println("Doc created");<br/>      }<br/>      if (event.getEvent().equals(Events.AFTER_UPDATE_DOCUMENT)) {<br/>        System.out.println("Doc updated");<br/>      }<br/>      return false;<br/>    } catch (Exception e) {<br/>      return false;<br/>    }<br/>  }<br/><br/>  public List<EnumEvent> getEventTypes() {<br/>    ArrayList<EnumEvent> eventList = new ArrayList<EnumEvent>();<br/>    eventList.add(Events.AFTER_CREATE_DOCUMENT);<br/>    eventList.add(Events.AFTER_UPDATE_DOCUMENT);<br/>    return eventList;<br/>  }<br/><br/>db.addListener(new DocumentListener());
transaction=DatabaseTransaction txn = db.startTransaction();<br/>try {<br/>  View view = db.getView("allStates");<br/>  for (final Document state : view.getAllDocuments()) {<br/>    state.replaceItemValue("txnTest", new Date());<br/>  }<br/>  txn.commit();<br/>} catch (Exception e) {<br/>  txn.rollback();<br/>} finally {<br/>  db.closeTransaction();<br/>}<br/>}

## DOCUMENTS SOURCE
putItem=doc.put("MyField", "My new value");<br/>doc.replaceItemValue("FieldToRemove", null);<br/>Item itm = doc.replaceItemValue("Number", 1);<br/>itm.setReaders(true); // this will error
autobox=String prevDocAsJson = doc.toJson(true);doc.replaceItemValue("DocAsJson", prevDocAsJson);<br/>doc.replaceItemValue("DateTimeField", new java.util.Date());<br/>doc.replaceItemValue("DateOnlyField", new java.sql.Date(System.currentTimeMillis()));<br/>doc.replaceItemValue("TimeOnlyField", new java.sql.Time(System.currentTimeMillis()));<br/>ArrayList<String> list = new ArrayList<String>();<br/>list.add("Value 1");<br/>list.add("Value 2");<br/>doc.replaceItemValue("MVField", list);<br/>HashMap<String, String> mapField = new HashMap<String, String>();<br/>DocumentCollection dc = threads.getAllDocumentsByKey(doc.getItemValueString("FullName"));<br/>for (Document tmp : dc) {<br/>  mapField.put(tmp.getUniversalID(), tmp.getItemValueString("Title"));<br/>}<br/>doc.put("MapField", mapField);<br/>BigDecimal decimal = new BigDecimal("2.5");<br/>doc.replaceItemValue("BigDecimalField", decimal);<br/>doc.replaceItemValue("EnumField", Fixes.FORCE_HEX_LOWER_CASE);<br/>doc.save();
syncHelper=Session sess = Factory.getSession(SessionType.NATIVE);<br/>Database extLib = sess.getDatabase("odademo/oda_1.nsf");<br/>java.util.Map<Object, String> syncMap = new java.util.HashMap<Object, String>();<br/>syncMap.put("Key", "State");<br/>syncMap.put("Name", "StateName");<br/>syncMap.put("@Now", "LastSync");<br/>DocumentSyncHelper helper = new DocumentSyncHelper(DocumentSyncHelper.Strategy.CREATE_AND_REPLACE, syncMap, extLib.getServer(),extLib.getFilePath(), "AllContactsByState", "Key");<br/>View states = extLib.getView("AllStates");<br/>DocumentCollection sourceCollection = states.getAllDocuments();<br/>helper.process(sourceCollection);

## ELSE SOURCE
dateTimes=doc.replaceItemValue("DateTimeField", new Date());<br/>doc.replaceItemValue("DateOnlyField", new java.sql.Date(System.currentTimeMillis()));<br/>//Outputs date only<br/>System.out.println(doc.getFirstItem("DateOnlyField").getValues());<br/>doc.replaceItemValue("TimeOnlyField", new java.sql.Time(System.currentTimeMillis()));<br/>//Outputs time only<br/>System.out.println(doc.getFirstItem("TimeOnlyField").getValues());<br/>doc.replaceItemValue("EmptyDate", "");<br/>Date blankDate = doc.getItemValue("EmptyDate", Date.class);<br/>//Outputs "null"<br/>System.out.println(blankDate);<br/>//Get date/time as date only<br/>java.sql.Date sqlDt = doc.getItemValue("DateTimeField", java.sql.Date.class);<br/>System.out.println(sqlDt);<br/>//Get date/time as time only<br/>java.sql.Time sqlTime = doc.getItemValue("DateTimeField", java.sql.Time.class);<br/>System.out.println(sqlTime);
form=Form form = doc.getForm();<br/>// Get UNID for form, for serialization, for immediate access to Form in future code<br/>String metaversalId = form.getMetaversalID()<br/>// Get selection formula relating to Form name and all aliases<br/>String selFormula = form.getSelectionFormula();<br/>Date date = new Date();<br/>Calendar cal = Calendar.getInstance();<br/>cal.setTime(date);<br/>cal.add(Calendar.DATE,-1);<br/>int docsCreatedSinceYesterday = Form.getModifiedNoteCount(cal.getTime());<br/>NoteCollection allFormDocs = form.getNoteCollection();<br/>String defaultXPage = form.getXPageAlt();<br/>String defaultClientXPage = form.getXPageAltClient(); 
color=ColorObject color = session.createColorObject();<br/>color.setRGB(255,255,255);<br/>String hexVal = color.getHex(); // ffffff<br/>color.setHex("000000");
openLog=try {<br/>  Database db = session.getDatabase("NoSuchNSF.nsf");<br/>  String fp = db.getFilePath();<br/>} catch(Exception e) {<br/>  XspOpeLogUtil.handleException(e);<br/>}
documentSorter=String sSearch = "FIELD Author contains \"Aline Winters\"";<br/>org.openntf.domino.DocumentCollection dc = Factory.getSession().getCurrentDatabase().FTSearch(sSearch, 500);<br/>List criteria = new ArrayList();<br/>criteria.add("Date");<br/>DocumentSorter sorter = new org.openntf.domino.helpers.DocumentSorter(dc, criteria);<br/>DocumentCollection results = sorter.sort();<br/>ExtLibUtil.getViewScope().put("javaTest", results.getCount());<br/>return results;
