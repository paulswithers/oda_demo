## XOTS SOURCE
xotsRunnable=@Tasklet(session = Tasklet.Session.CLONE)<br/>public static class SessionRunnable implements AbstractXotsRunnable<String> {<br/><br/>  public SessionRunnable() {<br/><br/>  }<br/><br/>  public void run() {<br/>    try {<br/>    String name = Factory.getSession(SessionType.CURRENT). getEffectiveUserName();<br/>    return name;<br/>  } catch (Throwable t) {<br/>    t.printStackTrace();<br/>    System.out.println(t.getMessage());<br/>    }<br/>  }<br/>}<br/><br/>Xots.getService().submit(new SessionRunnable());
xotsCallable=@Tasklet(session = Tasklet.Session.CLONE)<br/>public static class SessionCallable implements AbstractXotsCallable<String> {<br/><br/>  private int threadNo;<br/>  public SessionCallable(int threadNo) {<br/>    this.threadNo = threadNo;<br/>  }<br/><br/>  public String call() {<br/>    try {<br/>    String name = Factory.getSession(SessionType.CURRENT). getEffectiveUserName();<br/>    return "Hello " + name + " from thread " + threadNo;<br/>  } catch (Throwable t) {<br/>    t.printStackTrace();<br/>    return t.getMessage();<br/>    }<br/>  }<br/>}<br/><br/>List<Future<String>> results = new ArrayList<Future<String>>();<br/>for (int i = 0; i < 10; i++) {<br/>  results.add(Xots.getService().submit(new SessionCallable(i)));<br/>}<br/>for (Future<String> f : results) {<br/>  try {<br/>    System.out.println(f.get());<br/>  } catch (InterruptedException e) {<br/>    e.printStackTrace();<br/>  } catch (ExecutionException e) {<br/>    e.printStackTrace();<br/>  }<br/></div>}

## VIEW SOURCE
entryForLoop=Session sess = Factory.getSession(SessionType.NATIVE);<br/>TreeSet<String> names = new TreeSet<String>();<br/>View states = db.getView("AllStates");<br/>ViewEntry entState = states.getAllEntries().getFirstEntry();<br/>View byState = extLib.getView("AllContactsByState");<br/>ArrayList<Object> stateVals = new ArrayList(entState.getColumnValuesEx());<br/>ViewEntryCollection ec = byState.getAllEntriesByKey(stateVals.get(0));<br/>for (ViewEntry ent : ec) {<br/>  names.add((String) ent.getColumnValues().get(8));<br/>}<br/>System.out.println(names.toString());
docForLoop=Session sess = Factory.getSession(SessionType.NATIVE);<br/>View states = db.getView("AllStates");<br/>for (Document doc : states.getAllDocuments()) {<br/>  System.out.println(doc.getUniversalID()<br/>};
viewIsUnique=View states = db.getView("allStates");<br/>String state = doc.getItemValueString("Key");<br/>if (states.checkUnique(state, doc)) {<br/>  sb.append("There are no other documents with the key " + state);<br/>} else {<br/>  sb.append("Existing document found with the key " + state);<br/>}

## DATABASE SOURCE
getDb=Session sess = Factory.getSession(SessionType.NATIVE);<br/>Database db1 = sess.getDatabase("names.nsf");<br/>Database db2 = getDatabase(sess.getServerName(), "names.nsf");<br/>Database db3 = sess.getDatabase("80257EBB00493B48");<br/>Database db4 = sess.getDatabase(sess.getServer(), "80257EBB00493B48");<br/>Database db5 = sess.getDatabase("MyServer!!80257EBB00493B48");
getDoc=Session sess = Factory.getSession(SessionType.NATIVE);<br/>Database db = sess.getDatabase("80257EBB00493B48");<br/>Document nullDoc = db.getDocumentByUNID("5C8008CD88CEDAA9717ECF2F817BB7BF");<br/>Document newDoc = db.getDocumentWithKey("CreateThisNewDoc",true);<br/>newDoc.replaceItemValue("Form","Hello");<br/>newDoc.save();<br/>Document sameDoc = sess.getDocumentByMetaversalID("80257EBB00493B485C8008CD88CEDAA9717ECF2F817BB7BF");
listener=public class DocumentListener implements IDominoListener {<br/><br/>  public DocumentListener() {<br/>    <br/>}<br/><br/>  public boolean eventHappened(IDominoEvent event) {<br/>    try {<br/>      if (event.getEvent().equals(Events.AFTER_CREATE_DOCUMENT)) {<br/>        System.out.println("Doc created");<br/>      }<br/>      if (event.getEvent().equals(Events.AFTER_UPDATE_DOCUMENT)) {<br/>        System.out.println("Doc updated");<br/>      }<br/>      return false;<br/>    } catch (Exception e) {<br/>      return false;<br/>    }<br/>  }<br/><br/>  public List<EnumEvent> getEventTypes() {<br/>    ArrayList<EnumEvent> eventList = new ArrayList<EnumEvent>();<br/>    eventList.add(Events.AFTER_CREATE_DOCUMENT);<br/>    eventList.add(Events.AFTER_UPDATE_DOCUMENT);<br/>    return eventList;<br/>  }<br/><br/>db.addListener(new DocumentListener());
transaction=DatabaseTransaction txn = db.startTransaction();<br/>try {<br/>  View view = db.getView("allStates");<br/>  for (final Document state : view.getAllDocuments()) {<br/>    state.replaceItemValue("txnTest", new Date());<br/>  }<br/>  txn.commit();<br/>} catch (Exception e) {<br/>  txn.rollback();<br/>} finally {<br/>  db.closeTransaction();<br/>}<br/>}
