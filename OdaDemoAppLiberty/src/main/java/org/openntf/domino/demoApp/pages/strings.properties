xotsRunnable=@Tasklet(session = Tasklet.Session.CLONE)<br/>public static class SessionRunnable implements AbstractXotsRunnable<String> {<br/><br/>  public SessionRunnable() {<br/><br/>  }<br/><br/>  public void run() {<br/>    try {<br/>    String name = Factory.getSession(SessionType.CURRENT). getEffectiveUserName();<br/>    return name;<br/>  } catch (Throwable t) {<br/>    t.printStackTrace();<br/>    System.out.println(t.getMessage());<br/>    }<br/>  }<br/>}<br/><br/>Xots.getService().submit(new SessionRunnable());
xotsCallable=@Tasklet(session = Tasklet.Session.CLONE)<br/>public static class SessionCallable implements AbstractXotsCallable<String> {<br/>private int threadNo;<br/>  public SessionCallable(int threadNo) {<br/>this.threadNo = threadNo;<br/>  }<br/><br/>  public String call() {<br/>    try {<br/>    String name = Factory.getSession(SessionType.CURRENT). getEffectiveUserName();<br/>    return "Hello " + name + " from thread " + threadNo;<br/>  } catch (Throwable t) {<br/>    t.printStackTrace();<br/>    return t.getMessage();<br/>    }<br/>  }<br/>}<br/><br/>List<Future<String>> results = new ArrayList<Future<String>>();<br/>for (int i = 0; i < 10; i++) {<br/>  results.add(Xots.getService().submit(new SessionCallable(i)));<br/>}<br/>for (Future<String> f : results) {<br/>  try {<br/>    System.out.println(f.get());<br/>  } catch (InterruptedException e) {<br/>    e.printStackTrace();<br/>  } catch (ExecutionException e) {<br/>    e.printStackTrace();<br/>  }<br/></div>}
